# Docker Compose configuration for torch-inference framework
# Uses multi-stage Dockerfile with uv for dependency management

services:
  # Production service
  server:
    build:
      context: .
      target: production
    ports:
      - 8000:8000
    environment:
      - PYTHONPATH=/app
      - UV_CACHE_DIR=/tmp/uv-cache
    volumes:
      # Mount cache directory for better performance
      - uv-cache:/tmp/uv-cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  server-dev:
    build:
      context: .
      target: development
    ports:
      - 8001:8000
    environment:
      - PYTHONPATH=/app
      - UV_CACHE_DIR=/tmp/uv-cache
      - ENVIRONMENT=development
    volumes:
      # Mount source code for hot reload
      - ./:/app
      - uv-cache:/tmp/uv-cache
    restart: unless-stopped
    profiles:
      - dev

volumes:
  uv-cache:
    driver: local

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#
#  db:
#    image: postgres:15
#    restart: always
#    user: postgres
#    secrets:
#      - db-password
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_DB=torch_inference
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    expose:
#      - 5432
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    profiles:
#      - database
#
#  redis:
#    image: redis:7-alpine
#    restart: always
#    volumes:
#      - redis-data:/data
#    expose:
#      - 6379
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#    profiles:
#      - cache
#
#volumes:
#  db-data:
#  redis-data:
#
#secrets:
#  db-password:
#    file: db/password.txt

