[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "torch-inference-optimized"
version = "1.0.0"
description = "Optimized PyTorch inference framework with TensorRT, ONNX, and other acceleration techniques"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10,<3.11"  # Restricted to Python 3.10 to avoid numpy/accelerate conflicts
authors = [
    {name = "Genta", email = "genta@example.com"},
]
keywords = ["pytorch", "inference", "tensorrt", "optimization", "onnx", "cuda"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core FastAPI and async dependencies
    "fastapi==0.116.1",
    "uvicorn==0.35.0",
    "aiohttp==3.12.15",
    "anyio==4.10.0",
    "click==8.2.1",
    "pydantic==2.11.7",
    # Platform-specific async loop optimization (Unix only)
    "uvloop>=0.21.0; sys_platform != 'win32'",
    # Core ML dependencies
    "numpy==1.23.5", # Compatible with ESPnet requirements
    "scipy==1.15.3",
    "pillow==11.3.0",
    "opencv-python==4.11.0.86",
    "psutil==7.0.0",
    "tqdm==4.67.1",
    "requests==2.32.5",
    "pyyaml==6.0.2",
    # NOTE: PyTorch packages should be installed separately via:
    # uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126
    # ONNX optimization dependencies
    "onnx==1.18.0",
    "onnxruntime==1.22.1",
    "onnxsim==0.4.36",
    # Hugging Face integration
    "huggingface-hub==0.34.4",
    # Numba JIT compilation
    "numba==0.60.0",
    "absl-py==2.3.1",
    "aiohappyeyeballs==2.6.1",
    "aiosignal==1.4.0",
    "alembic==1.16.4",
    "annotated-types==0.7.0",
    "argon2-cffi==25.1.0",
    "argon2-cffi-bindings==25.1.0",
    "arrow==1.3.0",
    "asttokens==3.0.0",
    "async-lru==2.0.5",
    "async-timeout==5.0.1",
    "attrs==25.3.0",
    "authlib==1.6.1",
    "babel==2.17.0",
    "backports-asyncio-runner==1.2.0",
    "backports-datetime-fromisoformat==2.0.3",
    "bandit==1.8.6",
    "beautifulsoup4==4.13.5",
    "black==25.1.0",
    "bleach==6.2.0",
    "blinker==1.9.0",
    "cachetools==5.5.2",
    "certifi==2025.8.3",
    "cffi==1.17.1",
    "cfgv==3.4.0",
    "chardet==5.2.0",
    "charset-normalizer==3.4.3",
    "cloudpickle==3.1.1",
    "colorama==0.4.6",
    "coloredlogs==15.0.1",
    "comm==0.2.3",
    "contourpy==1.3.2",
    "coverage==7.10.4",
    "cryptography==45.0.6",
    "cycler==0.12.1",
    "databricks-sdk==0.64.0",
    "debugpy==1.8.16",
    "decorator==5.2.1",
    "defusedxml==0.7.1",
    "deprecated==1.2.18",
    "distlib==0.4.0",
    "dllist==2.0.0",
    "docker==7.1.0",
    "dotenv==0.9.9",
    "dparse==0.6.4",
    "exceptiongroup==1.3.0",
    "execnet==2.1.1",
    "executing==2.2.0",
    "fastjsonschema==2.21.2",
    "filelock==3.12.4",
    "flask==3.1.2",
    "flatbuffers==25.2.10",
    "fonttools==4.59.1",
    "fqdn==1.5.1",
    "frozenlist==1.7.0",
    "fsspec<=2025.3.0,>=2023.1.0",
    "gitdb==4.0.12",
    "gitpython==3.1.45",
    "google-auth==2.40.3",
    "graphene==3.4.3",
    "graphql-core==3.2.6",
    "graphql-relay==3.2.0",
    "greenlet==3.2.4",
    "grpcio==1.74.0",
    "h11==0.16.0",
    "httpcore==1.0.9",
    "httpx==0.28.1",
    "humanfriendly==10.0",
    "identify==2.6.13",
    "idna==3.10",
    "importlib-metadata==4.13.0",
    "iniconfig==2.1.0",
    "ipykernel==6.30.1",
    "ipython==8.37.0",
    "ipywidgets==8.1.7",
    "isoduration==20.11.0",
    "itsdangerous==2.2.0",
    "jedi==0.19.2",
    "jinja2==3.1.6",
    "joblib==1.5.1",
    "json5==0.12.1",
    "jsonpointer==3.0.0",
    "jsonschema==4.25.1",
    "jsonschema-specifications==2025.4.1",
    "jupyter==1.1.1",
    "jupyter-client==8.6.3",
    "jupyter-console==6.6.3",
    "jupyter-core==5.8.1",
    "jupyter-events==0.12.0",
    "jupyter-lsp==2.2.6",
    "jupyter-server==2.17.0",
    "jupyter-server-terminals==0.5.3",
    "jupyterlab==4.4.6",
    "jupyterlab-pygments==0.3.0",
    "jupyterlab-server==2.27.3",
    "jupyterlab-widgets==3.0.15",
    "kiwisolver==1.4.9",
    "lark==1.2.2",
    "llvmlite==0.43.0",
    "mako==1.3.10",
    "markdown==3.8.2",
    "markdown-it-py==4.0.0",
    "markupsafe==3.0.2",
    "marshmallow==4.0.0",
    "matplotlib==3.10.5",
    "matplotlib-inline==0.1.7",
    "mdurl==0.1.2",
    "mistune==3.1.3",
    "mlflow==3.3.1",
    "mlflow-skinny==3.3.1",
    "mlflow-tracing==3.3.1",
    "mpmath==1.3.0",
    "multidict==6.6.4",
    "mypy==1.17.1",
    "mypy-extensions==1.1.0",
    "nbclient==0.10.2",
    "nbconvert==7.16.6",
    "nbformat==5.10.4",
    "nest-asyncio==1.6.0",
    "networkx==3.4.2",
    "nodeenv==1.9.1",
    "notebook==7.4.5",
    "notebook-shim==0.2.4",
    "nvidia-cuda-runtime-cu12==12.9.79",
    "opentelemetry-api==1.16.0",
    "opentelemetry-sdk==1.16.0",
    "opentelemetry-semantic-conventions==0.37b0",
    "overrides==7.7.0",
    "packaging==25.0",
    "pandas==2.3.2",
    "pandocfilters==1.5.1",
    "parso==0.8.5",
    "pathspec==0.12.1",
    "pbr==7.0.1",
    "pip==25.2",
    "platformdirs==4.3.8",
    "pluggy==1.6.0",
    "pre-commit==4.3.0",
    "prometheus-client==0.22.1",
    "prompt-toolkit==3.0.51",
    "propcache==0.3.2",
    "protobuf==6.32.0",
    "pure-eval==0.2.3",
    "py-cpuinfo==9.0.0",
    "pyarrow==21.0.0",
    "pyasn1==0.6.1",
    "pyasn1-modules==0.4.2",
    "pycparser==2.22",
    "pydantic-core==2.33.2",
    "pygments==2.19.2",
    "pyparsing==3.2.3",
    "pyproject-api==1.9.1",
    "pyreadline3==3.5.4",
    "pytest==8.4.1",
    "pytest-asyncio==1.1.0",
    "pytest-benchmark==5.1.0",
    "pytest-cov==6.2.1",
    "pytest-html==4.1.1",
    "pytest-json-report==1.5.0",
    "pytest-metadata==3.1.1",
    "pytest-mock==3.14.1",
    "pytest-timeout==2.4.0",
    "pytest-xdist==3.8.0",
    "python-dateutil==2.9.0.post0",
    "python-dotenv==1.1.1",
    "python-json-logger==3.3.0",
    "python-multipart==0.0.20",
    "pytz==2025.2",
    "pywin32==311",
    "pywinpty==3.0.0",
    "pyzmq==27.0.2",
    "referencing==0.36.2",
    "rfc3339-validator==0.1.4",
    "rfc3986-validator==0.1.1",
    "rfc3987-syntax==1.1.0",
    "rich==14.1.0",
    "rpds-py==0.27.0",
    "rsa==4.9.1",
    "ruamel-yaml==0.18.15",
    "ruamel-yaml-clib==0.2.12",
    "ruff==0.12.9",
    "safety==3.2.4",
    "safety-schemas==0.0.5",
    "scikit-learn==1.7.1",
    "send2trash==1.8.3",
    "setuptools>=80.9.0",
    "shellingham==1.5.4",
    "six==1.17.0",
    "smmap==5.0.2",
    "sniffio==1.3.1",
    "soupsieve==2.7",
    "sqlalchemy==2.0.43",
    "sqlparse==0.5.3",
    "stack-data==0.6.3",
    "starlette==0.47.2",
    "stevedore==5.4.1",
    "sympy>=1.13.3",
    "tensorboard==2.20.0",
    "tensorboard-data-server==0.7.2",
    "tensorly==0.9.0",
    "tensorrt==10.12.0.36",
    "tensorrt-cu12==10.12.0.36",
    "tensorrt-cu12-bindings==10.12.0.36",
    "tensorrt-cu12-libs==10.12.0.36",
    "terminado==0.18.1",
    "threadpoolctl==3.6.0",
    "tinycss2==1.4.0",
    "tomli==2.2.1",
    "tornado==6.5.2",
    "tox==4.11.4",
    "traitlets==5.14.3",
    "typer==0.16.1",
    "types-python-dateutil==2.9.0.20250822",
    "typing-extensions==4.14.1",
    "typing-inspection==0.4.1",
    "tzdata==2025.2",
    "uri-template==1.3.0",
    "urllib3==2.5.0",
    "uv==0.8.8",
    "virtualenv==20.34.0",
    "vulkan==1.3.275.1",
    "waitress==3.0.2",
    "wcwidth==0.2.13",
    "webcolors==24.11.1",
    "webencodings==0.5.1",
    "websocket-client==1.8.0",
    "werkzeug==3.1.3",
    "wheel==0.45.1",
    "widgetsnbextension==4.0.14",
    "wrapt==1.17.3",
    "yarl==1.20.1",
    "zipp==3.23.0",
    "taichi>=1.7.4",
    "python-jose[cryptography]>=3.5.0",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "transformers==4.55.4",
]

[project.optional-dependencies]
# CUDA GPU support
cuda = [
    "torch>=2.8.0,<2.9.0",  # Updated to match PyTorch 2.8.x with CUDA support
    "torchvision>=0.23.0", 
    "torchaudio>=2.8.0",
    "onnxruntime-gpu>=1.16.0",
]

# TensorRT support (separate due to special requirements and version conflicts)
tensorrt = [
    "tensorrt>=10.12.0",  # Updated to match available version
    # Note: torch-tensorrt version compatibility is complex:
    # - torch-tensorrt 2.5.0 requires TensorRT 10.3.x (incompatible with our 10.12.x)
    # - torch-tensorrt 2.8.0 requires PyTorch 2.8.x (now compatible with our 2.8.x constraint)
    # Making torch-tensorrt optional for now until version compatibility is resolved
    # "torch-tensorrt>=2.8.0,<3.0.0",  # Requires PyTorch 2.8.x
]

# Audio processing support (TTS and STT)
audio = [
    "librosa>=0.9.2",  # Compatible with ESPnet requirements
    "soundfile>=0.12.0",
    "transformers>=4.30.0",
    "datasets>=2.10.0",
    "accelerate>=0.34.0",  # Updated to newer version that might support numpy 2.x
    "speechbrain>=0.5.0",
    "espnet>=202310",  # Updated to 202310+ for protobuf compatibility with ONNX
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# All extras combined
all = [
    "torch-inference-optimized[cuda,tensorrt,audio,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/Evintkoo/torch-inference"
Repository = "https://github.com/Evintkoo/torch-inference"
Documentation = "https://github.com/Evintkoo/torch-inference#readme"
Issues = "https://github.com/Evintkoo/torch-inference/issues"

[project.scripts]
torch-inference = "main:main"
benchmark-inference = "benchmark:main"
optimize-model = "optimization_demo:main"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0", 
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    # Development tools
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.0.0",
    "tensorboard>=2.0.0",
    "mlflow>=2.0.0",
]

[tool.uv]
# Use unsafe-best-match to allow versions from all indexes
index-strategy = "unsafe-best-match"

# Prefer binary wheels for faster installation
compile-bytecode = true
no-cache = false

# Limit environments to current platform to avoid cross-platform resolution issues
environments = ["python_full_version == '3.10.*' and sys_platform == 'win32'"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.hatch.build.targets.wheel]
packages = ["framework"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
# Pytest configuration in pyproject.toml
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"] 
python_functions = ["test_*"]

# Add project paths
pythonpath = [
    ".",
    "framework"
]

# Default options
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--durations=10",
    "--color=yes",
    "--disable-warnings",
    "--maxfail=5",
    "--timeout=120",
    "--timeout-method=thread"
]

# Asyncio support
asyncio_mode = "auto"

# Test markers
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, end-to-end)",
    "slow: Slow running tests (>5 seconds)", 
    "gpu: Tests requiring GPU/CUDA",
    "tensorrt: Tests requiring TensorRT",
    "onnx: Tests requiring ONNX runtime",
    "enterprise: Enterprise feature tests",
    "benchmark: Performance benchmark tests",
    "smoke: Smoke tests for quick validation",
    "regression: Regression tests",
    "security: Security-related tests",
    "api: API endpoint tests",
    "model: Tests requiring real models",
    "mock: Tests using only mock objects"
]

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::UserWarning:torch.*",
    "ignore::FutureWarning:transformers.*",
    "ignore::UserWarning:huggingface_hub.*",
    "error::RuntimeWarning",
    "error::ImportWarning"
]

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# JUnit XML for CI/CD
junit_family = "xunit2"
junit_suite_name = "torch_inference_tests"

# Timeout (if pytest-timeout is installed) 
# Individual test timeout: 120 seconds per test
# Session timeout: 900 seconds (15 minutes) for entire test suite
timeout = 120
timeout_func_only = true
timeout_method = "thread"

[tool.coverage.run]
source = ["framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "run_tests.py"
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
