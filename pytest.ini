[tool:pytest]
# Main pytest configuration file for torch-inference framework

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Minimum version requirement
minversion = 7.0

# Add project root to Python path
pythonpath = . framework

# Default command line options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=long
    --durations=10
    --color=yes
    --maxfail=5
    --showlocals
    --log-file=test.log
    --log-file-level=ERROR
    --capture=no
    --log-cli-level=ERROR

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers for test categorization
markers =
    asyncio: Asynchronous tests
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, end-to-end)
    slow: Slow running tests (>5 seconds)
    gpu: Tests requiring GPU/CUDA
    tensorrt: Tests requiring TensorRT
    onnx: Tests requiring ONNX runtime
    enterprise: Enterprise feature tests
    benchmark: Performance benchmark tests
    smoke: Smoke tests for quick validation
    regression: Regression tests
    security: Security-related tests
    api: API endpoint tests
    model: Tests requiring real models
    mock: Tests using only mock objects

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Warnings control
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:torch.*
    ignore::FutureWarning:transformers.*
    ignore::UserWarning:huggingface_hub.*
    default::RuntimeWarning
    default::ImportWarning
    default::Exception

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging configuration
log_file = test.log
log_file_level = ERROR
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings (when using pytest-cov)
# These are defaults, can be overridden via command line
addopts_coverage = 
    --cov=framework
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing:skip-covered
    --cov-report=lcov:coverage.lcov
    --cov-fail-under=80
    --cov-branch

# Distributed testing options (when using pytest-xdist)
addopts_parallel = 
    -n auto
    --dist worksteal

# JUnit XML output for CI/CD
junit_family = xunit2
junit_suite_name = torch_inference_tests
junit_duration_report = call
junit_log_passing_tests = true

# Cache configuration
cache_dir = .pytest_cache

# Console output options
console_output_style = progress

# Live logging
log_auto_indent = true

# Doctest options
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS

# Required plugins (these will be auto-loaded if available)
required_plugins =
    pytest-asyncio >= 0.21.0

# Optional plugins (will be used if installed)
# pytest-cov: Coverage reporting
# pytest-xdist: Parallel test execution  
# pytest-benchmark: Performance benchmarking
# pytest-mock: Enhanced mocking capabilities
# pytest-timeout: Test timeouts
# pytest-html: HTML reports

# Additional error reporting options
# Ensure all exceptions and failures are logged
log_capture = true
log_level = ERROR

# Capture all output including stdout/stderr
capture = no

# Show full exception tracebacks
tb_style = long

# Report all test outcomes including errors and failures
result_log = test_results.log
