# Tox configuration for torch-inference framework
# Automates testing across multiple Python versions and environments

[tox]
minversion = 4.0
envlist = 
    py{310,311,312}
    coverage
    lint
    type-check
    security
    docs
isolated_build = True
skip_missing_interpreters = True

[testenv]
# Base test environment configuration
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-timeout
    torch>=2.6.0
    torchvision>=0.20.0
    numpy>=2.1.0
    pyyaml>=6.0.0
    pillow>=11.0.0
    requests>=2.32.0

extras = dev

commands = 
    pytest {posargs:tests/}

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}
    ENVIRONMENT = test
    DEVICE = cpu
    LOG_LEVEL = INFO

# Parallel execution
parallel_show_output = True

[testenv:coverage]
# Coverage testing environment
deps = 
    {[testenv]deps}
    pytest-cov
    coverage[toml]

commands =
    pytest --cov=framework --cov-report=html --cov-report=xml --cov-report=term-missing --cov-fail-under=80 {posargs:tests/}

[testenv:unit]
# Unit tests only
commands = 
    pytest {posargs:tests/unit/}

[testenv:integration] 
# Integration tests only
commands =
    pytest {posargs:tests/integration/}

[testenv:smoke]
# Quick smoke tests
commands =
    pytest -m smoke {posargs}

[testenv:gpu]
# GPU-specific tests (requires CUDA)
deps =
    {[testenv]deps}
    
commands = 
    pytest -m gpu {posargs:tests/}

setenv =
    {[testenv]setenv}
    DEVICE = cuda

[testenv:tensorrt]
# TensorRT-specific tests
deps =
    {[testenv]deps}
    tensorrt>=10.7.0
    
commands =
    pytest -m tensorrt {posargs:tests/}

[testenv:onnx]
# ONNX-specific tests  
deps =
    {[testenv]deps}
    onnx>=1.14.0
    onnxruntime>=1.16.0
    
commands =
    pytest -m onnx {posargs:tests/}

[testenv:enterprise]
# Enterprise feature tests
commands =
    pytest -m enterprise {posargs:tests/}

[testenv:benchmark]
# Performance benchmark tests
deps =
    {[testenv]deps}
    pytest-benchmark
    
commands =
    pytest -m benchmark --benchmark-only {posargs:tests/}

[testenv:lint]
# Code linting and formatting checks
deps =
    black>=23.0.0
    ruff>=0.1.0
    isort>=5.12.0

commands =
    black --check --diff .
    ruff check .
    isort --check-only --diff .

[testenv:format]
# Code formatting
deps =
    black>=23.0.0
    ruff>=0.1.0
    isort>=5.12.0

commands =
    black .
    ruff check --fix .
    isort .

[testenv:type-check]
# Type checking with mypy
deps =
    mypy>=1.0.0
    types-requests
    types-PyYAML
    types-Pillow

commands = 
    mypy framework

[testenv:security]
# Security scanning
deps =
    bandit[toml]>=1.7.0
    safety>=2.0.0

commands =
    bandit -r framework -f json -o bandit-report.json
    bandit -r framework
    safety check --json --output safety-report.json
    safety check

[testenv:docs]
# Documentation building and testing
deps =
    mkdocs>=1.5.0
    mkdocs-material>=9.0.0
    mkdocstrings[python]>=0.24.0

commands =
    mkdocs build --strict

[testenv:clean]
# Clean up generated files
deps =
allowlist_externals = 
    rm
    find
    
commands =
    rm -rf .pytest_cache
    rm -rf htmlcov
    rm -rf .coverage
    rm -rf .tox
    rm -rf build
    rm -rf dist
    rm -rf *.egg-info
    find . -name __pycache__ -type d -exec rm -rf {} +
    find . -name "*.pyc" -delete

# Pytest configuration for tox
[testenv:pytest]
deps = {[testenv]deps}
commands = pytest {posargs}

# Performance testing with different configurations
[testenv:perf-cpu]
setenv =
    {[testenv]setenv}
    DEVICE = cpu
    
commands =
    pytest -m benchmark --benchmark-only --benchmark-sort=mean {posargs:tests/}

[testenv:perf-gpu]
setenv =
    {[testenv]setenv}
    DEVICE = cuda
    
commands =
    pytest -m benchmark --benchmark-only --benchmark-sort=mean {posargs:tests/}

# Development environment
[testenv:dev]
# Development environment with all dependencies
deps = 
    {[testenv]deps}
    pytest-cov
    pytest-benchmark
    pytest-xdist
    pytest-html
    pre-commit
    
commands = 
    pre-commit install
    pytest {posargs}

# CI/CD specific configurations
[testenv:ci]
# CI environment configuration
deps = 
    {[testenv]deps}
    pytest-cov
    pytest-xdist
    
commands =
    pytest -n auto --cov=framework --cov-report=xml --cov-report=term --junitxml=junit.xml {posargs:tests/}

# Docker testing
[testenv:docker]
# Docker-based testing
platform = linux
deps = {[testenv]deps}

commands =
    pytest {posargs:tests/}

# Memory profiling
[testenv:memory]
# Memory usage profiling
deps =
    {[testenv]deps}
    pytest-memray
    
commands =
    pytest --memray {posargs:tests/}

# Test data management
[testenv:test-data]
# Download and manage test data/models
allowlist_externals = 
    python
    
commands =
    python tests/models/create_test_models.py

# Report generation
[testenv:report]
# Generate comprehensive test reports
deps =
    {[testenv]deps}
    pytest-cov
    pytest-html
    pytest-benchmark
    
commands =
    pytest --cov=framework --cov-report=html --html=report.html --self-contained-html --benchmark-only --benchmark-json=benchmark.json {posargs:tests/}
